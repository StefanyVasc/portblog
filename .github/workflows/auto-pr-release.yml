name: Auto PR to release when main changes

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write
  pull-requests: write

jobs:
  open-pr:
    runs-on: ubuntu-latest
    env:
      RELEASE_BRANCH: "release"
      TMP_BRANCH: "ci/update-release-from-main"
      BOT_NAME: "workflow-bot"
      BOT_EMAIL: "workflow-bot@users.noreply.github.com"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup git
        run: |
          git config user.name  "$BOT_NAME"
          git config user.email "$BOT_EMAIL"
          git fetch --all --prune

      - name: Sanity checks (does release exist? is it already up-to-date?)
        id: sanity
        run: |
          if ! git show-ref --verify --quiet "refs/remotes/origin/${RELEASE_BRANCH}"; then
            echo "exists=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "exists=true" >> "$GITHUB_OUTPUT"

          # release já contém a main?
          git checkout "${RELEASE_BRANCH}"
          git fetch origin main --prune
          if git merge-base --is-ancestor origin/main HEAD; then
            echo "uptodate=true" >> "$GITHUB_OUTPUT"
          else
            echo "uptodate=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create temp branch with merge main -> release
        if: steps.sanity.outputs.exists == 'true' && steps.sanity.outputs.uptodate == 'false'
        id: merge
        run: |
          set -e
          git checkout -B "${TMP_BRANCH}" "origin/${RELEASE_BRANCH}"
          if ! git merge --no-edit origin/main; then
            echo "has_conflict=true" >> "$GITHUB_OUTPUT"
            git merge --abort || true
            exit 0
          fi
          echo "has_conflict=false" >> "$GITHUB_OUTPUT"
          git push -u origin "${TMP_BRANCH}"

      - name: Create or update PR (base=release, head=TMP_BRANCH)
        if: steps.sanity.outputs.exists == 'true' && steps.sanity.outputs.uptodate == 'false' && steps.merge.outputs.has_conflict == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const base = process.env.RELEASE_BRANCH;
            const head = `${owner}:${process.env.TMP_BRANCH}`;
            const title = `chore: update ${base} with latest main`;
            const body = [
              `Atualiza a branch \`${base}\` com a última \`main\`.`,
              `- PR criada automaticamente pelo workflow.`,
              `- Os checks desta PR precisam passar para liberar o merge.`
            ].join('\n');

            // procura PR existente head->base
            const { data: prs } = await github.rest.pulls.list({
              owner, repo, state: 'open', base, head
            });

            if (prs.length > 0) {
              core.info(`PR #${prs[0].number} já existe. Nada a criar.`);
            } else {
              const { data: pr } = await github.rest.pulls.create({
                owner, repo, base, head: process.env.TMP_BRANCH, title, body
              });
              core.info(`PR criada: #${pr.number}`);
            }

      - name: Log when up-to-date or conflicting
        if: steps.sanity.outputs.exists != 'true' || steps.sanity.outputs.uptodate == 'true' || steps.merge.outputs.has_conflict == 'true'
        run: |
          if [ "${{ steps.sanity.outputs.exists }}" != "true" ]; then
            echo "Branch release não existe. Nada a fazer."
          elif [ "${{ steps.sanity.outputs.uptodate }}" = "true" ]; then
            echo "release já está atualizada com main."
          elif [ "${{ steps.merge.outputs.has_conflict }}" = "true" ]; then
            echo "Conflito ao mesclar main em release. PR não aberta."
          fi
